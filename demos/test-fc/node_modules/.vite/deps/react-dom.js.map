{
  "version": 3,
  "sources": ["../../../../../packages/react-dom/src/root.ts", "../../../../../packages/react-reconciler/src/fiberFlags.ts", "../../../../../packages/react-reconciler/src/workTags.ts", "../../../../../packages/react-reconciler/src/fiber.ts", "../../../../../packages/react-reconciler/src/updateQueue.ts", "../../../../../packages/react-reconciler/src/childFibers.ts", "../../../../../packages/react-reconciler/src/fiberHooks.ts", "../../../../../packages/react-reconciler/src/beginWork.ts", "../../../../../packages/react-dom/src/hostConfig.ts", "../../../../../packages/react-reconciler/src/completeWork.ts", "../../../../../packages/react-reconciler/src/commitWork.ts", "../../../../../packages/react-reconciler/src/workLoop.ts", "../../../../../packages/react-reconciler/src/fiberReconciler.ts", "../../../../../packages/react-dom/index.ts"],
  "sourcesContent": ["// ReactDOM.createRoot(ele).render(<App />)\n\nimport {\n\tcreateContainer,\n\tupdateContainer\n} from 'react-reconciler/src/fiberReconciler';\nimport { Container } from './hostConfig';\nimport { ReactElementType } from 'shared/ReactTypes';\n\nexport const createRoot = (container: Container) => {\n\tconst root = createContainer(container);\n\n\treturn {\n\t\trender(element: ReactElementType) {\n\t\t\tupdateContainer(element, root);\n\t\t}\n\t};\n};\n", "export type Flags = number;\n\nexport const NoFlags = 0b0000000;\nexport const Placement = 0b0000001;\nexport const Update = 0b0000010;\nexport const ChildDeletion = 0b0000100;\n\nexport const MutationMask = Placement | Update | ChildDeletion;\n", "export type WorkTag =\n\t| typeof FunctionComponent\n\t| typeof HostRoot\n\t| typeof HostCompoment\n\t| typeof HostText;\n\nexport const FunctionComponent = 0;\nexport const HostRoot = 3; //  react根节点\nexport const HostCompoment = 5; // <div>\nexport const HostText = 6; // 123\n", "import { Flags, NoFlags } from './fiberFlags';\nimport { Container } from 'hostConfig';\nimport { FunctionComponent, HostCompoment, WorkTag } from './workTags';\nimport { Props, Key, Ref, ReactElementType } from 'shared/ReactTypes';\n\nexport class FiberNode {\n\ttag: WorkTag; // 节点类型 () -> {}  -> FunctionComponent\n\tpendingProps: Props; // 最新的props\n\tkey: Key;\n\ttype: any; // 当前节点的组件类型(函数组件，类组件，标签名)\n\tstateNode: any; // DOM节点或者是组件实例\n\tref: Ref; // 引用，如(ref,React.createRef)\n\n\treturn: FiberNode | null; // 父fiber\n\tsibling: FiberNode | null; // 兄弟fiber\n\tchild: FiberNode | null; // 第一个子fiber节点\n\tindex: number; // 当前节点在其兄弟节点中的位置\n\n\tmemoizedProps: Props | null; // 上一次渲染使用的props\n\tmemoizedState: any; // 状态\n\talternate: FiberNode | null; // 指向上次渲染的fiber(current和workInProgress的互指)\n\tflags: Flags; // fiber需要执行的操作\n\tsubtreeFlags: Flags; // 当前节点的子树的副作用标识\n\tupdateQueue: unknown; // 存放state更新队列(如setState的调用)\n\n\tconstructor(tag: WorkTag, pendingProps: Props, key: Key) {\n\t\tthis.tag = tag; // fiber类型\n\t\tthis.key = key;\n\t\tthis.stateNode = null; // HostComponent <div> -> div的dom节点\n\t\tthis.type = null; // FunctionComponent -> () => {}\n\n\t\tthis.return = null; // 指向父fiberNode\n\t\tthis.sibling = null;\n\t\tthis.child = null;\n\t\tthis.index = 0;\n\t\tthis.ref = null;\n\n\t\t// 工作单元\n\t\tthis.pendingProps = pendingProps;\n\t\tthis.memoizedProps = null;\n\t\tthis.memoizedState = null;\n\t\tthis.alternate = null;\n\t\tthis.updateQueue = null;\n\n\t\t// 副作用\n\t\tthis.flags = NoFlags;\n\t\tthis.subtreeFlags = NoFlags;\n\t}\n}\n\nexport class FiberRootNode {\n\tcontainer: Container; // 宿主环境的容器，比如 DOM 中的 #root\n\tcurrent: FiberNode; // 指向当前渲染中的根 FiberNode（HostRootFiber）\n\tfinishedWork: FiberNode | null; // 调度完成、等待 commit 的 Fiber 树\n\tconstructor(container: Container, hostRootFiber: FiberNode) {\n\t\tthis.container = container;\n\t\tthis.current = hostRootFiber;\n\t\thostRootFiber.stateNode = this;\n\t\tthis.finishedWork = null;\n\t}\n}\n\nexport const createWorkInProcess = (\n\tcurrent: FiberNode,\n\tpendingProps: Props\n): FiberNode => {\n\tlet wip = current.alternate;\n\n\tif (wip === null) {\n\t\t// mount\n\t\twip = new FiberNode(current.tag, pendingProps, current.key);\n\t\twip.stateNode = current.stateNode;\n\t\twip.alternate = current;\n\t\tcurrent.alternate = wip;\n\t} else {\n\t\t// update\n\t\twip.pendingProps = pendingProps;\n\t\twip.flags = NoFlags;\n\t\twip.subtreeFlags = NoFlags;\n\t}\n\n\twip.type = current.type;\n\twip.updateQueue = current.updateQueue;\n\twip.child = current.child;\n\twip.memoizedProps = current.memoizedProps;\n\twip.memoizedState = current.memoizedState;\n\n\treturn wip;\n};\n\nexport const createFiberFromElement = (element: ReactElementType) => {\n\tconst { type, key, props } = element;\n\n\tlet fiberTag: WorkTag = FunctionComponent;\n\n\tif (typeof type === 'string') {\n\t\t// HostComponent <div></div> -> type: \"div\"\n\t\tfiberTag = HostCompoment;\n\t} else if (typeof type !== 'function' && __DEV__) {\n\t\tconsole.warn('未定义的type类型', type);\n\t}\n\n\tconst fiber = new FiberNode(fiberTag, props, key);\n\tfiber.type = type;\n\treturn fiber;\n};\n", "import { Action } from 'shared/ReactTypes';\n\nexport interface Update<State> {\n\taction: Action<State>;\n}\n\n// 更新的队列\nexport interface UpdateQueue<State> {\n\tshared: {\n\t\tpending: Update<State> | null;\n\t};\n}\nexport const createUpdate = <State>(action: Action<State>): Update<State> => {\n\treturn {\n\t\taction\n\t};\n};\n\nexport const createUpdateQueue = <State>() => {\n\treturn {\n\t\tshared: {\n\t\t\tpending: null\n\t\t}\n\t} as UpdateQueue<State>;\n};\n\nexport const enqueueUpdate = <State>(\n\tupdateQueue: UpdateQueue<State>,\n\tupdate: Update<State>\n) => {\n\tupdateQueue.shared.pending = update;\n};\n\n// 往队列中添加\nexport const processUpdateQueue = <State>(\n\tbaseState: State,\n\tpendingUpdate: Update<State> | null\n): {\n\tmemoizedState: State;\n} => {\n\tconst result: ReturnType<typeof processUpdateQueue<State>> = {\n\t\tmemoizedState: baseState\n\t};\n\tif (pendingUpdate !== null) {\n\t\tconst action = pendingUpdate.action;\n\t\tif (action instanceof Function) {\n\t\t\t// state 1 -> () => 4\n\t\t\tresult.memoizedState = action(baseState);\n\t\t} else {\n\t\t\t// state 1 -> 2\n\t\t\tresult.memoizedState = action;\n\t\t}\n\t}\n\n\treturn result;\n};\n", "import { ReactElementType } from 'shared/ReactTypes';\nimport { createFiberFromElement, FiberNode } from './fiber';\nimport { REACT_ELEMENT_TYPE } from 'shared/ReactSymbols';\nimport { HostText } from './workTags';\nimport { Placement } from './fiberFlags';\n\nfunction ChildReconciler(shouldTrackEffects: boolean) {\n\tfunction reconcileSingleElement(\n\t\treturnFiber: FiberNode,\n\t\tcurrentFiber: FiberNode | null,\n\t\telement: ReactElementType\n\t) {\n\t\t// 根据element创建fiber\n\t\tconst fiber = createFiberFromElement(element);\n\t\tfiber.return = returnFiber;\n\t\treturn fiber;\n\t}\n\tfunction reconcilSingleTextNode(\n\t\treturnFiber: FiberNode,\n\t\tcurrentFiber: FiberNode | null,\n\t\tcontent: string | number\n\t) {\n\t\tconst fiber = new FiberNode(HostText, { content }, null);\n\t\tfiber.return = returnFiber;\n\n\t\treturn fiber;\n\t}\n\n\tfunction placeSingleChild(fiber: FiberNode) {\n\t\tif (shouldTrackEffects && fiber.alternate === null) {\n\t\t\t// mount阶段的时候才有可能去一次性插入\n\t\t\tfiber.flags |= Placement;\n\t\t}\n\n\t\treturn fiber;\n\t}\n\n\treturn function reconcileChildFibers(\n\t\treturnFiber: FiberNode,\n\t\tcurrentFiber: FiberNode | null,\n\t\tnewChild?: ReactElementType\n\t) {\n\t\t// 先判断fiber的类型\n\t\tif (typeof newChild === 'object' && newChild !== null) {\n\t\t\tswitch (newChild.$$typeof) {\n\t\t\t\tcase REACT_ELEMENT_TYPE:\n\t\t\t\t\treturn placeSingleChild(\n\t\t\t\t\t\treconcileSingleElement(returnFiber, currentFiber, newChild)\n\t\t\t\t\t);\n\n\t\t\t\tdefault:\n\t\t\t\t\tif (__DEV__) {\n\t\t\t\t\t\tconsole.warn('未实现的concile类型', newChild);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (typeof newChild === 'string' || typeof newChild === 'number') {\n\t\t\treturn placeSingleChild(\n\t\t\t\treconcilSingleTextNode(returnFiber, currentFiber, newChild)\n\t\t\t);\n\t\t}\n\n\t\t// TODO 多节点的情况\n\n\t\tif (__DEV__) {\n\t\t\tconsole.warn('未实现的concile类型', newChild);\n\t\t}\n\n\t\treturn null;\n\t};\n}\n\nexport const reconcileChildFibers = ChildReconciler(true);\nexport const mountChildFibers = ChildReconciler(false);\n", "import { FiberNode } from './fiber';\n\nexport const renderWithHooks = (wip: FiberNode) => {\n\tconst Component = wip.type;\n\tconst props = wip.pendingProps;\n\tconst children = Component(props);\n\n\treturn children;\n};\n", "import { ReactElementType } from 'shared/ReactTypes';\nimport { FiberNode } from './fiber';\nimport { processUpdateQueue, UpdateQueue } from './updateQueue';\nimport {\n\tFunctionComponent,\n\tHostCompoment,\n\tHostRoot,\n\tHostText\n} from './workTags';\nimport { mountChildFibers, reconcileChildFibers } from './childFibers';\nimport { renderWithHooks } from './fiberHooks';\n\nexport const beginWork = (wip: FiberNode) => {\n\t// 比较ReactElement和FilberNode,生成子FilberNode\n\n\tswitch (wip.tag) {\n\t\tcase HostRoot:\n\t\t\treturn updateHostRoot(wip);\n\t\tcase HostCompoment:\n\t\t\treturn updateHostComponent(wip);\n\t\tcase HostText:\n\t\t\treturn null;\n\t\tcase FunctionComponent:\n\t\t\treturn updateFunctionComponent(wip);\n\t\tdefault:\n\t\t\tif (__DEV__) {\n\t\t\t\tconsole.warn('beginWork未实现的部分');\n\t\t\t}\n\t\t\tbreak;\n\t}\n\n\treturn null;\n};\n\nexport const updateFunctionComponent = (wip: FiberNode) => {\n\tconst nextChildren = renderWithHooks(wip);\n\treconcileChildren(wip, nextChildren);\n\n\treturn wip.child;\n};\n\nexport const updateHostRoot = (wip: FiberNode) => {\n\t// 上一次更新的state\n\tconst baseState = wip.memoizedState;\n\n\t// 拿到workprocess中的那个更新队列\n\tconst updateQueue = wip.updateQueue as UpdateQueue<Element>;\n\tconst pending = updateQueue.shared.pending;\n\n\t// 重置更新队列\n\tupdateQueue.shared.pending = null;\n\n\t// 计算出新的state\n\tconst { memoizedState } = processUpdateQueue(baseState, pending);\n\twip.memoizedState = memoizedState;\n\n\tconst nextChildren = wip.memoizedState;\n\n\t// 根据当前的workprocess和\n\treconcileChildren(wip, nextChildren);\n\treturn wip.child;\n};\n\nexport const updateHostComponent = (wip: FiberNode) => {\n\tconst nextProps = wip.memoizedProps;\n\tconst nextChildren = nextProps.children;\n\n\treconcileChildren(wip, nextChildren);\n\treturn wip.child;\n};\n\nexport const reconcileChildren = (\n\twip: FiberNode,\n\tchildren?: ReactElementType\n) => {\n\tconst current = wip.alternate;\n\n\tif (current !== null) {\n\t\t// update阶段\n\n\t\twip.child = reconcileChildFibers(wip, current?.child, children);\n\t} else {\n\t\t// mount阶段\n\t\twip.child = mountChildFibers(wip, null, children);\n\t}\n};\n", "import { FiberNode } from 'react-reconciler/src/fiber';\n\nexport type Container = Element;\nexport type Instance = Element;\n\nexport const createInstance = (type: string, props: any): Instance => {\n\t// TODO 处理Props\n\tconst element = document.createElement(type);\n\treturn element;\n};\n\nexport const appendInitialChild = (\n\tparent: Instance | Container,\n\tchild: Instance\n) => {\n\tparent.appendChild(child);\n};\n\nexport const createTextInstance = (content: string) => {\n\treturn document.createTextNode(content);\n};\n\nexport const appendChildToContainer = appendInitialChild;\n", "import { Container, createInstance, createTextInstance } from 'hostConfig';\nimport { FiberNode } from './fiber';\nimport {\n\tFunctionComponent,\n\tHostCompoment,\n\tHostRoot,\n\tHostText\n} from './workTags';\nimport { NoFlags } from './fiberFlags';\n\nexport const completeWork = (wip: FiberNode) => {\n\t// 归阶段的操作\n\tconst newProps = wip.pendingProps;\n\tconst current = wip.alternate;\n\n\tswitch (wip.tag) {\n\t\tcase HostCompoment:\n\t\t\tif (current !== null && wip.stateNode) {\n\t\t\t\t// update\n\t\t\t} else {\n\t\t\t\t/**\n\t\t\t\t * 1.构建dom\n\t\t\t\t * 2. 将dom插入到dom树中\n\t\t\t\t */\n\t\t\t\tconst instance = createInstance(wip.type, newProps);\n\t\t\t\tappendAllChildren(instance, wip);\n\t\t\t\twip.stateNode = instance;\n\t\t\t}\n\t\t\tbubbleProperties(wip);\n\t\t\treturn null;\n\t\tcase HostText:\n\t\t\tif (current !== null && wip.stateNode) {\n\t\t\t\t// update\n\t\t\t} else {\n\t\t\t\tconst instance = createTextInstance(newProps.content);\n\t\t\t\twip.stateNode = instance;\n\t\t\t}\n\t\t\tbubbleProperties(wip);\n\t\t\treturn null;\n\t\tcase HostRoot:\n\t\t\tbubbleProperties(wip);\n\t\t\treturn null;\n\t\tcase FunctionComponent:\n\t\t\tbubbleProperties(wip);\n\t\t\treturn null;\n\t\tdefault:\n\t\t\tif (__DEV__) {\n\t\t\t\tconsole.warn('未实现的情况');\n\t\t\t}\n\t\t\tbreak;\n\t}\n};\n\nexport const appendAllChildren = (parent: Container, wip: FiberNode) => {\n\tlet node = wip.child;\n\n\twhile (node !== null) {\n\t\tif (node?.tag === HostCompoment || node?.tag === HostText) {\n\t\t\tappendAllChildren(parent, node.stateNode);\n\t\t} else if (node.child !== null) {\n\t\t\tnode.child.return = node;\n\t\t\tnode = node.child;\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (node === wip) {\n\t\t\treturn;\n\t\t}\n\n\t\twhile (node.sibling === null) {\n\t\t\tif (node.return === null || node.return === wip) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tnode = node?.return;\n\t\t}\n\n\t\tnode.sibling.return = node.return;\n\t\tnode = node.sibling;\n\t}\n};\n\nexport const bubbleProperties = (wip: FiberNode) => {\n\tlet subtreeFlags = NoFlags;\n\tlet child = wip.child;\n\n\twhile (child !== null) {\n\t\tsubtreeFlags |= child.subtreeFlags;\n\t\tsubtreeFlags |= child.flags;\n\n\t\tchild.return = wip;\n\t\tchild = child.sibling;\n\t}\n\n\twip.subtreeFlags |= subtreeFlags;\n};\n", "import { appendChildToContainer, Container } from 'hostConfig';\nimport { FiberNode, FiberRootNode } from './fiber';\nimport { MutationMask, NoFlags, Placement } from './fiberFlags';\nimport { HostCompoment, HostRoot, HostText } from './workTags';\n\nlet nextEffect: FiberNode | null = null;\n\nexport const commitMutationEffects = (finishedWork: FiberNode) => {\n\tnextEffect = finishedWork;\n\n\twhile (nextEffect !== null) {\n\t\tconst child: FiberNode | null = nextEffect.child;\n\t\tif (\n\t\t\t(nextEffect.subtreeFlags & MutationMask) !== NoFlags &&\n\t\t\tchild !== null\n\t\t) {\n\t\t\tnextEffect = child;\n\t\t} else {\n\t\t\tup: while (nextEffect !== null) {\n\t\t\t\tcommitMutationEffectsOnFiber(nextEffect);\n\t\t\t\tconst sibling: FiberNode | null = nextEffect.sibling;\n\t\t\t\tif (sibling !== null) {\n\t\t\t\t\tnextEffect = sibling;\n\t\t\t\t\tbreak up;\n\t\t\t\t}\n\n\t\t\t\tnextEffect = nextEffect.return;\n\t\t\t}\n\t\t}\n\t}\n};\n\nexport const commitMutationEffectsOnFiber = (finishedWork: FiberNode) => {\n\tconst flags = finishedWork.flags;\n\n\tif ((flags & Placement) !== NoFlags) {\n\t\tcommitPlacement(finishedWork);\n\t\tfinishedWork.flags &= ~Placement;\n\t}\n};\n\nexport const commitPlacement = (finishedWork: FiberNode) => {\n\t// 根据dom寻找parent节点\n\tif (__DEV__) {\n\t\tconsole.warn('执行Placement操作', finishedWork);\n\t}\n\n\tconst hostParent = getHostParent(finishedWork);\n\tif (hostParent !== null) {\n\t\tappendPlacementNodeIntoContainer(finishedWork, hostParent);\n\t}\n};\n\nexport const getHostParent = (fiber: FiberNode): Container | null => {\n\tlet parent = fiber.return;\n\twhile (parent) {\n\t\tconst parentTag = parent.tag;\n\n\t\tif (parentTag === HostCompoment) {\n\t\t\treturn parent.stateNode;\n\t\t}\n\n\t\tif (parentTag === HostRoot) {\n\t\t\treturn (parent.stateNode as FiberRootNode).container;\n\t\t}\n\n\t\tparent = parent.return;\n\t}\n\n\tif (__DEV__) {\n\t\tconsole.warn('未找到host parent', parent);\n\t}\n\treturn null;\n};\n\nexport const appendPlacementNodeIntoContainer = (\n\tfinishedWork: FiberNode,\n\thostParent: Container\n) => {\n\tif (finishedWork.tag === HostCompoment || finishedWork.tag === HostText) {\n\t\tappendChildToContainer(hostParent, finishedWork.stateNode);\n\t\treturn;\n\t}\n\n\tconst child = finishedWork.child;\n\tif (child !== null) {\n\t\tappendPlacementNodeIntoContainer(child, hostParent);\n\t\tlet sibling = child.sibling;\n\n\t\twhile (sibling !== null) {\n\t\t\tappendPlacementNodeIntoContainer(sibling, hostParent);\n\t\t\tsibling = sibling.sibling;\n\t\t}\n\t}\n};\n", "import { createWorkInProcess, FiberNode, FiberRootNode } from './fiber';\nimport { beginWork } from './beginWork';\nimport { completeWork } from './completeWork';\nimport { HostRoot } from './workTags';\nimport { MutationMask, NoFlags } from './fiberFlags';\nimport { commitMutationEffects } from './commitWork';\n\nlet workInProgress: FiberNode | null = null;\n\nfunction prepareFreshStack(root: FiberRootNode) {\n\tworkInProgress = createWorkInProcess(root.current, {});\n}\n\nexport const scheduleUpdateOnFiber = (fiber: FiberNode) => {\n\t// TODO 调度功能\n\t// FiberRootNode\n\tconst root = markUpdateFromFiberToRoot(fiber);\n\trenderRoot(root);\n};\n\nexport const markUpdateFromFiberToRoot = (fiber: FiberNode) => {\n\tlet node = fiber;\n\tlet parent = node.return;\n\twhile (parent !== null) {\n\t\tnode = parent;\n\t\tparent = node.return;\n\t}\n\n\t// 找到HostRootFiber的时候\n\tif (node.tag == HostRoot) {\n\t\treturn node.stateNode;\n\t}\n\n\treturn null;\n};\n\nfunction renderRoot(root: FiberRootNode) {\n\t// 初始化\n\tprepareFreshStack(root);\n\n\tdo {\n\t\ttry {\n\t\t\tworkLoop();\n\t\t\tbreak;\n\t\t} catch (e) {\n\t\t\tif (__DEV__) {\n\t\t\t\tconsole.log('root', root);\n\t\t\t\tconsole.warn('workLoop发生错误', e);\n\t\t\t}\n\t\t\tworkInProgress = null;\n\t\t}\n\t} while (true);\n\n\tconst finishedWork = root.current.alternate;\n\troot.finishedWork = finishedWork;\n\n\tcommitRoot(root);\n}\n\nexport const commitRoot = (root: FiberRootNode) => {\n\t// 拿到等待被commit的fiber树\n\tconst finishedWork = root.finishedWork;\n\n\tif (finishedWork === null) {\n\t\treturn;\n\t}\n\tif (__DEV__) {\n\t\tconsole.warn('commit阶段开始', finishedWork);\n\t}\n\n\t// 重置\n\troot.finishedWork = null;\n\n\tconst subtreeHasEffect =\n\t\t(finishedWork.subtreeFlags & MutationMask) !== NoFlags;\n\tconst rootHasEffect = (finishedWork.flags & MutationMask) !== NoFlags;\n\n\tif (subtreeHasEffect || rootHasEffect) {\n\t\t//  * 1.beforeMutation阶段\n\n\t\t//  * 2. mutation阶段\n\t\tcommitMutationEffects(finishedWork);\n\t\troot.current = finishedWork;\n\t\t//  * 3. layout阶段 (useLayoutEffect执行的时候)\n\t} else {\n\t\troot.current = finishedWork;\n\t}\n};\n\nexport const workLoop = () => {\n\twhile (workInProgress !== null) {\n\t\tperformUnitOfWork(workInProgress);\n\t}\n};\n\nexport const performUnitOfWork = (fiber: FiberNode) => {\n\tconst next = beginWork(fiber);\n\tfiber.memoizedProps = fiber.pendingProps;\n\n\tif (next === null) {\n\t\tcompleteUnitOfWork(fiber);\n\t} else {\n\t\tworkInProgress = next;\n\t}\n};\n\nfunction completeUnitOfWork(fiber: FiberNode) {\n\tlet node: FiberNode | null = fiber;\n\n\tdo {\n\t\t// 开始进行归的阶段\n\t\tcompleteWork(node);\n\t\tconst sibling = node.sibling;\n\n\t\tif (sibling !== null) {\n\t\t\tworkInProgress = sibling;\n\t\t\treturn;\n\t\t}\n\n\t\tnode = node!.return;\n\t\tworkInProgress = node;\n\t} while (node !== null);\n}\n", "import { Container } from 'hostConfig';\nimport { FiberNode, FiberRootNode } from './fiber';\nimport { HostRoot } from './workTags';\nimport {\n\tcreateUpdate,\n\tcreateUpdateQueue,\n\tenqueueUpdate,\n\tUpdateQueue\n} from './updateQueue';\nimport { ReactElementType } from 'shared/ReactTypes';\nimport { scheduleUpdateOnFiber } from './workLoop';\n\nexport const createContainer = (container: Container) => {\n\tconst hostRootFiber = new FiberNode(HostRoot, {}, null);\n\tconst root = new FiberRootNode(container, hostRootFiber);\n\n\thostRootFiber.updateQueue = createUpdateQueue();\n\n\treturn root;\n};\n\nexport const updateContainer = (\n\telement: ReactElementType | null,\n\troot: FiberRootNode\n) => {\n\tconst hostRootFiber = root.current;\n\tconst update = createUpdate<ReactElementType | null>(element);\n\tenqueueUpdate(\n\t\thostRootFiber.updateQueue as UpdateQueue<ReactElementType | null>,\n\t\tupdate\n\t);\n\n\tscheduleUpdateOnFiber(hostRootFiber);\n\treturn element;\n};\n", "import * as ReactDOM from './src/root';\n\nexport default ReactDOM;\n"],
  "mappings": "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",
  "names": ["reconcileChildFibers"]
}
